{"version":3,"sources":["Components/Scroll.js","Components/Card.js","Components/CardList.js","Components/Search.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Scroll","props","style","overflow","border","height","children","Card","id","name","email","className","src","alt","toUpperCase","CardList","poke","map","user","i","newurl","url","slice","length","urlnum","startsWith","key","Search","type","placeholder","onChange","seacrhChange","App","array","a","fetch","json","list","results","setPokemon","useState","pokemon","seacrhfield","setseacrhfield","fetchmon","filterList","filter","robot","toLowerCase","includes","event","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRAUeA,EARA,SAACC,GACZ,OACA,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACpEJ,EAAMK,SADP,M,MCkBWC,MAnBf,YAAiC,IAAlBC,EAAiB,EAAjBA,GAAIC,EAAa,EAAbA,KAEf,OAF4B,EAAPC,MAGjB,yBAAKC,UAAU,oDACX,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,YACf,yBAAMC,IAAG,mFAA+EJ,EAA/E,QAAyFK,IAAI,YAEjG,yBAAKF,UAAU,eAChB,4BAAKF,EAAKK,eACV,wCC+BDC,EAvCE,SAAC,GACjB,IADkBC,EACnB,EADmBA,KAEjB,OACM,6BACSA,EAAKC,KAAI,SAACC,EAAKC,GAEZ,IAAIC,EAASF,EAAKG,IAAIC,MAAMJ,EAAKG,IAAIE,OAAQ,EAAEL,EAAKG,IAAIE,OAAO,GAE/D,SAASC,EAAOH,GAEhB,OAAGA,EAAII,WAAW,KAEXJ,EAAIC,MAAM,GAETD,EAAII,WAAW,KAEhBJ,EAAIC,MAAM,GAGND,EAIX,OACK,kBAAC,EAAD,CACGK,IAAOP,EACPX,GAAKgB,EAAOJ,GACZX,KAAOS,EAAKT,KACZC,MAAQc,EAAOJ,UChB5BO,EAdA,SAAC1B,GAEZ,OACI,yBAAKU,UAAU,OACX,2BACAA,UAAU,uCACViB,KAAK,SACLC,YAAY,sBACZC,SAAY7B,EAAM8B,iB,MCsCfC,MA1Cf,WAEE,IAAIC,EAAQ,GADd,4CAEE,8BAAAC,EAAA,sEAEiBC,MAAM,+CAFvB,cAEInB,EAFJ,gBAGiBA,EAAKoB,OAHtB,cAGIC,EAHJ,gBAIcA,EAAKC,QAJnB,OAIAL,EAJA,OAKAM,EAAWN,GALX,6CAFF,4BAUgC,IAAIO,WAAS,IAV7C,mBAUSC,EAVT,KAUiBF,EAVjB,OAWwC,IAAIC,WAAS,IAXrD,mBAWSE,EAXT,KAWqBC,EAXrB,yCAYEC,GAOM,IAAMC,EAAaJ,EAAQK,QAAO,SAASC,GAC3C,OAAOA,EAAMtC,KAAKuC,cAAcC,SAASP,EAAYM,kBAGrD,OAAQP,EAAQlB,OACd,yBAAKZ,UAAW,MACd,wBAAIA,UAAU,aAAd,wBAIA,kBAAC,EAAD,CAAQoB,aAfb,SAAkBmB,GAEfP,EAAeO,EAAMC,OAAOC,UAc1B,6BAEA,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUpC,KAAS6B,MAVF,yCCnBbQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8b61721a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Scroll = (props)=>{\r\n    return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n    {props.children};\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport \"./card.css\";\r\n\r\nfunction Card({id, name, email}){\r\n\r\n    return(\r\n        <div className=\"dib br4 pa2 grow bw2 shadow-5 tc pokeCardOutline\">\r\n            <div className=\"br3 pokeCard\" >\r\n            <div className=\"pokeImg \">\r\n            <img  src= {`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`} alt=\"robots\" />\r\n            </div>\r\n                 <div className=\"pokeDetails\">\r\n                <h1>{name.toUpperCase()}</h1>\r\n                <p>Hello</p>\r\n              </div>\r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\n\r\nexport default Card;\r\n","import React ,{useState} from 'react';\r\nimport Card from \"./Card\";\r\n\r\n\r\n\r\nconst CardList = ({poke})=>\r\n{\r\n  return(\r\n        <div>\r\n                {poke.map((user,i) => {\r\n\r\n                    var newurl = user.url.slice(user.url.length -4,user.url.length-1);\r\n\r\n                    function urlnum(url)\r\n                    {\r\n                    if(url.startsWith(\"/\"))\r\n                    {\r\n                    return url.slice(1);\r\n                    }\r\n                    else if(url.startsWith(\"n\"))\r\n                    {\r\n                    return url.slice(2);\r\n                    }\r\n                    else{\r\n                        return url;\r\n                    }\r\n                    }\r\n                \r\n                    return(\r\n                         <Card\r\n                            key = {i}\r\n                            id= {urlnum(newurl)}\r\n                            name={ user.name }\r\n                            email= {urlnum(newurl)}\r\n                            />\r\n                            )\r\n                    }\r\n                )}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\n\r\nconst Search = (props)=>{\r\n\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input \r\n            className=\"pa3 ba br3 b--green bg-lightest-blue\"\r\n            type=\"search\" \r\n            placeholder=\"Search your Pokemon\"\r\n            onChange = {props.seacrhChange} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Search;","import React, {useState} from 'react';\r\nimport Scroll from \"../Components/Scroll\";\r\nimport CardList from '../Components/CardList';\r\nimport Seacrh from \"../Components/Search\";\r\n// import robots from \"../Components/robots\";\r\nimport \"./App.css\";\r\n\r\nfunction App() \r\n{\r\n  var array = [];\r\n  async function fetchmon()\r\n  {\r\n  var poke = await fetch(\"https://pokeapi.co/api/v2/pokemon?limit=500\");\r\n  var list = await poke.json();\r\n  array = await list.results;\r\n  setPokemon(array);\r\n  }\r\n\r\n  const [pokemon,setPokemon ] = new useState([]);\r\n  const [seacrhfield,setseacrhfield ] = new useState(\"\");\r\n  fetchmon()\r\n  \r\n       function onSearch(event)\r\n        {\r\n          setseacrhfield(event.target.value);\r\n        } \r\n\r\n        const filterList = pokemon.filter(function(robot){\r\n        return robot.name.toLowerCase().includes(seacrhfield.toLowerCase())\r\n      }) \r\n  \r\n        return !pokemon.length ? <h1>Loading </h1> : (\r\n          <div className =\"tc\">\r\n            <h1 className=\"hudson f1\">\r\n              Welcome to PokeCards\r\n            </h1>\r\n        \r\n            <Seacrh seacrhChange =  { onSearch }/>\r\n            <hr/>\r\n\r\n            <Scroll>  \r\n                <CardList poke = { filterList }/>\r\n            </Scroll>\r\n          </div>\r\n        );\r\n  \r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./Containers/App\";\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"tachyons\";\r\nimport \"./index.css\";\r\n\r\n\r\nReactDOM.render(\r\n    <App/>\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}