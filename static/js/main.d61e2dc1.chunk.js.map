{"version":3,"sources":["Components/Scroll.js","Components/Card.jsx","Components/CardList.js","Components/Search.js","Components/robots.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Scroll","props","style","overflow","border","height","children","Card","id","name","email","className","src","alt","CardList","robots","map","user","i","key","Search","type","placeholder","onChange","seacrhChange","username","App","onSearch","event","setState","seacrhfield","target","value","state","this","filterList","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mOAUeA,EARA,SAACC,GACZ,OACA,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACpEJ,EAAMK,SADP,MCYWC,MAbf,YAAiC,IAAlBC,EAAiB,EAAjBA,GAAIC,EAAa,EAAbA,KAAMC,EAAO,EAAPA,MACrB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA2BJ,EAA3B,iBAA8CK,IAAI,WAC1D,6BACI,4BAAKJ,GACL,2BAAIC,MCeLI,EArBE,SAAC,GACjB,IADkBC,EACnB,EADmBA,OAEf,OACI,6BACSA,EAAOC,KAAI,SAACC,EAAKC,GACd,OACK,kBAAC,EAAD,CACGC,IAAOD,EACPV,GAAKO,EAAOG,GAAGV,GACfC,KAAOM,EAAOG,GAAGT,KACjBC,MAASK,EAAOG,GAAGR,aCKhCU,EAfA,SAACnB,GAGZ,OACI,yBAAKU,UAAU,OACX,2BACAA,UAAU,mCACVU,KAAK,SACLC,YAAY,sBACZC,SAAYtB,EAAMuB,iBCuEfT,EAnFA,CACb,CACEP,GAAI,EACJC,KAAM,cACNgB,SAAU,QACVf,MAAO,mBAET,CACEF,GAAI,EACJC,KAAM,UACNgB,SAAU,UACVf,MAAO,sBAET,CACEF,GAAI,EACJC,KAAM,SACNgB,SAAU,SACVf,MAAO,sBAET,CACEF,GAAI,EACJC,KAAM,UACNgB,SAAU,UACVf,MAAO,oBAET,CACEF,GAAI,EACJC,KAAM,cACNgB,SAAU,SACVf,MAAO,mBAET,CACEF,GAAI,EACJC,KAAM,UACNgB,SAAU,UACVf,MAAO,uBAET,CACEF,GAAI,EACJC,KAAM,SACNgB,SAAU,SACVf,MAAO,oBAET,CACEF,GAAI,EACJC,KAAM,eACNgB,SAAU,SACVf,MAAO,sBAET,CACEF,GAAI,EACJC,KAAM,YACNgB,SAAU,OACVf,MAAO,gBAET,CACEF,GAAI,GACJC,KAAM,gBACNgB,SAAU,OACVf,MAAO,mBAGT,CACEF,GAAI,GACJC,KAAM,kBACNgB,SAAU,SACVf,MAAO,oBAET,CACEF,GAAI,GACJC,KAAM,gBACNgB,SAAU,UACVf,MAAO,qBAGT,CACEF,GAAI,GACJC,KAAM,WACNgB,SAAU,WACVf,MAAO,sBChCIgB,G,kBArCb,aAAc,IAAD,8BACX,+CAOHC,SAAW,SAACC,GAEX,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SARvC,EAAKC,MAAQ,CACXlB,OAASA,EACTe,YAAc,IAJL,E,sEAeN,IAAD,EACwBI,KAAKD,MAA5BlB,EADD,EACCA,OAAQe,EADT,EACSA,YACTK,EAAapB,EAAOqB,QAAO,SAASrB,GACxC,OAAOA,EAAON,KAAK4B,cAAcC,SAASR,EAAYO,kBAG1D,OAAQtB,EAAOwB,OACb,yBAAK5B,UAAW,MACd,wBAAIA,UAAU,aAAd,0BAIA,kBAAC,EAAD,CAAQa,aAAkBU,KAAKP,WAC/B,6BAEA,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUZ,OAAWoB,MAVL,2C,GAvBNK,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d61e2dc1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Scroll = (props)=>{\r\n    return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n    {props.children};\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\n\r\nfunction Card({id, name, email}){\r\n    return(\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc\" >\r\n            <img src= {`https://robohash.org/${id}?size=200x200`} alt=\"robots\" />\r\n            <div>\r\n                <h1>{name}</h1>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Card;\r\n\r\n","import React from 'react';\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({robots})=>\r\n{\r\n    return(\r\n        <div>\r\n                {robots.map((user,i) => {\r\n                    return(\r\n                         <Card \r\n                            key = {i} \r\n                            id= {robots[i].id} \r\n                            name={ robots[i].name } \r\n                            email= { robots[i].email } \r\n                            />\r\n                            )\r\n                    }\r\n                )}\r\n        </div>\r\n    );\r\n\r\n} \r\n\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\n\r\nconst Search = (props)=>{\r\n    // console.log(props.onSeacrh);\r\n\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input \r\n            className=\"pa3 ba b--green bg-lightest-blue\"\r\n            type=\"search\" \r\n            placeholder=\"search robo Friends\"\r\n            onChange = {props.seacrhChange} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Search;","const robots = [\n  {\n    id: 1,\n    name: 'Mothi Nivas',\n    username: 'Mothi',\n    email: 'mothi@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Gowtham',\n    username: 'Gowtham',\n    email: 'gowtham@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Hudson',\n    username: 'Hudson',\n    email: 'hudson@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Shomesh',\n    username: 'Shomesh',\n    email: 'shomesh@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Arshad peer',\n    username: 'Arshad',\n    email: 'arshad@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Prakash',\n    username: 'Prakash',\n    email: 'prakash@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Aakash',\n    username: 'Aakash',\n    email: 'aakash@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Jothi Lingam',\n    username: 'Lingam',\n    email: 'lingam@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Manimaram',\n    username: 'Mani',\n    email: 'mani@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Amir ul dheen',\n    username: 'Amir',\n    email: 'amir@karina.biz'\n  },\n  \n  {\n    id: 11,\n    name: 'Govindha Rajalu',\n    username: 'Rajalu',\n    email: 'rajalu@knort.org'\n  },\n  {\n    id: 12,\n    name: 'Praveen Kumar',\n    username: 'Praveen',\n    email: 'praveen@umail.com'\n  },\n  \n  {\n    id: 13,\n    name: 'Karthick',\n    username: 'karthick',\n    email: 'karthick@uml.info'\n  }\n];\n\nexport default robots;","import React, {Component} from 'react';\nimport Scroll from \"../Components/Scroll\";\nimport CardList from '../Components/CardList';\nimport Seacrh from \"../Components/Search\";\nimport robots from \"../Components/robots\";\nimport \"./App.css\";\n\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      robots : robots,\n      seacrhfield : \"\"\n    }\n  }  \n\n onSearch = (event) =>\n {\n  this.setState({seacrhfield :event.target.value});\n } \n\n\n\nrender(){\n  const {robots, seacrhfield} = this.state;\n  const filterList = robots.filter(function(robots){\n    return robots.name.toLowerCase().includes(seacrhfield.toLowerCase())\n  }) \n  \nreturn !robots.length ? <h1>Loading</h1> : (\n  <div className =\"tc\">\n    <h1 className=\"hudson f1\">\n      Welcome to robofriends\n    </h1>\n \n    <Seacrh seacrhChange =  { this.onSearch }/>\n    <hr/>\n\n    <Scroll>  \n        <CardList robots = { filterList}/>\n    </Scroll>\n  </div>\n);\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./Containers/App\";\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\nimport \"./index.css\";\n\n\nReactDOM.render(\n    <App />\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}